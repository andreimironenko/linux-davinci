From oliver@neukum.name  Fri Nov 24 00:55:57 2006
Date: Thu, 23 Nov 2006 15:19:23 +0100 (MET)
From: Oliver Neukum <oliver@neukum.name>
To: greg@kroah.com, linux-usb-devel@lists.sourceforge.net, utx@penguin.cz
Subject: USB: gl620a bad buffer allocation
MIME-Version: 1.0
Content-Type: text/plain;  charset="us-ascii"
Content-Disposition: inline
Message-Id: <200611231510.39833.oliver@neukum.name>

gl620a uses a buffer within a struct. This can corrupt memory on machines
that are not cache coherent.

Signed-off-by: Oliver Neukum <oliver@neukum.name>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/usb/net/gl620a.c |   14 ++++++++++++--
 1 file changed, 12 insertions(+), 2 deletions(-)

--- gregkh-2.6.orig/drivers/usb/net/gl620a.c
+++ gregkh-2.6/drivers/usb/net/gl620a.c
@@ -87,7 +87,7 @@ struct gl_header {
 
 struct gl_priv {
 	struct urb	*irq_urb;
-	char		irq_buf [INTERRUPT_BUFSIZE];
+	u8		*irq_buf;
 };
 
 static inline int gl_control_write(struct usbnet *dev, u8 request, u16 value)
@@ -180,16 +180,25 @@ static int genelink_init(struct usbnet *
 	struct gl_priv *priv;
 
 	// allocate the private data structure
-	if ((priv = kmalloc(sizeof *priv, GFP_KERNEL)) == 0) {
+	if ((priv = kmalloc(sizeof *priv, GFP_KERNEL)) == 0 ) {
 		dbg("%s: cannot allocate private data per device",
 			dev->net->name);
 		return -ENOMEM;
 	}
 
+	if ((priv->irq_buf = kmalloc(INTERRUPT_BUFSIZE, GFP_KERNEL)) == NULL)
+	{
+		dbg("%s: cannot allocate buffer per device",
+			dev->net->name);
+		kfree(priv);
+		return -ENOMEM;
+	}
+
 	// allocate irq urb
 	if ((priv->irq_urb = usb_alloc_urb(0, GFP_KERNEL)) == 0) {
 		dbg("%s: cannot allocate private irq urb per device",
 			dev->net->name);
+		kfree(priv->irq_buf);
 		kfree(priv);
 		return -ENOMEM;
 	}
@@ -226,6 +235,7 @@ static int genelink_free(struct usbnet *
 	usb_free_urb(priv->irq_urb);
 
 	// free the private data structure
+	kfree(priv->irq_buf);
 	kfree(priv);
 
 	return 0;
