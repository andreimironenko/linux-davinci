From david-b@pacbell.net Thu Feb 15 18:57:06 2007
From: David Brownell <david-b@pacbell.net>
Date: Thu, 15 Feb 2007 18:50:01 -0800
Subject: usbnet: recognize SiteCom CN-124
To: Greg KH <greg@kroah.com>
Cc: linux-usb-devel@lists.sourceforge.net, Francois Barre <francois.barre@gmail.com>
Message-ID: <200702151850.02039.david-b@pacbell.net>
Content-Disposition: inline


Add Sitecom CN-124 device IDs to ALI M5632 usb host-to-host cable;
device IDs from Francois Barre <francois.barre@gmail.com>

Signed-off-by: David Brownell <dbrownell@users.sourceforge.net>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/usb/net/cdc_subset.c |   16 +++++++++++++---
 1 file changed, 13 insertions(+), 3 deletions(-)

--- gregkh-2.6.orig/drivers/usb/net/cdc_subset.c
+++ gregkh-2.6/drivers/usb/net/cdc_subset.c
@@ -79,13 +79,19 @@ static int always_connected (struct usbn
  *
  * ALi M5632 driver ... does high speed
  *
+ * NOTE that the MS-Windows drivers for this chip use some funky and
+ * (naturally) undocumented 7-byte prefix to each packet, so this is a
+ * case where we don't currently interoperate.  Also, once you unplug
+ * one end of the cable, you need to replug the other end too ... since
+ * chip docs are unavailable, there's no way to reset the relevant state
+ * short of a power cycle.
+ *
  *-------------------------------------------------------------------------*/
 
 static const struct driver_info	ali_m5632_info = {
 	.description =	"ALi M5632",
 };
 
-
 #endif
 
 
@@ -223,6 +229,10 @@ static const struct usb_device_id	produc
 	USB_DEVICE (0x0402, 0x5632),	// ALi defaults
 	.driver_info =	(unsigned long) &ali_m5632_info,
 },
+{
+	USB_DEVICE (0x182d,0x207c),	// SiteCom CN-124
+	.driver_info =	(unsigned long) &ali_m5632_info,
+},
 #endif
 
 #ifdef	CONFIG_USB_AN2720
@@ -314,13 +324,13 @@ static struct usb_driver cdc_subset_driv
 
 static int __init cdc_subset_init(void)
 {
- 	return usb_register(&cdc_subset_driver);
+	return usb_register(&cdc_subset_driver);
 }
 module_init(cdc_subset_init);
 
 static void __exit cdc_subset_exit(void)
 {
- 	usb_deregister(&cdc_subset_driver);
+	usb_deregister(&cdc_subset_driver);
 }
 module_exit(cdc_subset_exit);
 
