From akpm@linux-foundation.org Mon Feb  5 16:37:43 2007
From: "Andreas Block" <andreas.block@esd-electronics.com>
Date: Mon, 05 Feb 2007 16:36:07 -0800
Subject: PCI: PCI devices get assigned redundant IRQs
To: greg@kroah.com
Cc: akpm@linux-foundation.org, andreas.block@esd-electronics.com, ebiederm@xmission.com, mingo@elte.hu, tglx@linutronix.de, torvalds@linux-foundation.org
Message-ID: <200702060037.l160bAGQ004839@shell0.pdx.osdl.net>


From: "Andreas Block" <andreas.block@esd-electronics.com>

I'm currently working on a port to a CPCI board with a MPC5200.  When
testing the PCI interrupt routing, I discovered the following: Even devices
which don't use interrupts (-> PCI Spec.: Interrupt Pin Register is zero),
get an interrupt assigned (this is at least true for most of the
PPC-targets I looked at).

The cause is pretty obvious in drivers/pci/setup-irq.c.  I guess at least
in an ideal world with correctly designed hardware, the code should rather
look as in the patch below.

Of course it doesn't hurt anybody to have an unuseable IRQ assigned to a
PCI-to-PCI-bridge (or something alike), but to me it seems a bit strange. 
Please correct me, if I'm mislead.

The patch below is tested on the above mentioned CPCI-MPC5200 board and is
compiler tested with the latest git-repository kernel on x86.

Cc: "Eric W. Biederman" <ebiederm@xmission.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: Ingo Molnar <mingo@elte.hu>
Cc: Linus Torvalds <torvalds@osdl.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/pci/setup-irq.c |   20 +++++++++++---------
 1 file changed, 11 insertions(+), 9 deletions(-)

--- gregkh-2.6.orig/drivers/pci/setup-irq.c
+++ gregkh-2.6/drivers/pci/setup-irq.c
@@ -24,7 +24,7 @@ pdev_fixup_irq(struct pci_dev *dev,
 	       int (*map_irq)(struct pci_dev *, u8, u8))
 {
 	u8 pin, slot;
-	int irq;
+	int irq = 0;
 
 	/* If this device is not on the primary bus, we need to figure out
 	   which interrupt pin it will come in on.   We know which slot it
@@ -33,16 +33,18 @@ pdev_fixup_irq(struct pci_dev *dev,
 	   apply the swizzle function.  */
 
 	pci_read_config_byte(dev, PCI_INTERRUPT_PIN, &pin);
-	/* Cope with 0 and illegal. */
-	if (pin == 0 || pin > 4)
+	/* Cope with illegal. */
+	if (pin > 4)
 		pin = 1;
 
-	/* Follow the chain of bridges, swizzling as we go.  */
-	slot = (*swizzle)(dev, &pin);
-
-	irq = (*map_irq)(dev, slot, pin);
-	if (irq == -1)
-		irq = 0;
+	if (pin != 0) {
+		/* Follow the chain of bridges, swizzling as we go.  */
+		slot = (*swizzle)(dev, &pin);
+
+		irq = (*map_irq)(dev, slot, pin);
+		if (irq == -1)
+			irq = 0;
+	}
 	dev->irq = irq;
 
 	pr_debug("PCI: fixup irq: (%s) got %d\n",
