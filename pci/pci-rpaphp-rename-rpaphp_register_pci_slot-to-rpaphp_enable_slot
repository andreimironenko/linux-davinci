From kristen.c.accardi@intel.com Fri Apr 13 15:34:20 2007
From: Linas Vepstas <linas@austin.ibm.com>
Date: Fri, 13 Apr 2007 15:34:20 -0700
Subject: [patch 14/21] PCI: rpaphp: Rename rpaphp_register_pci_slot() to rpaphp_enable_slot()
To: gregkh@suse.de
Message-ID: <20070413223420.541255027@intel.com>
Content-Disposition: inline; filename=pci-rpaphp-rename-rpaphp_register_pci_slot-to-rpaphp_enable_slot


From: Linas Vepstas <linas@austin.ibm.com>

Rename rpaphp_register_pci_slot() because its easy to confuse
with  rpaphp_register_slot() even though it does something 
completely different. Rename it to rpaphp_enable_slot() because
its almost identical to enbale_slot().

Signed-off-by: Linas Vepstas <linas@austin.ibm.com>
Cc: John Rose <johnrose@austin.ibm.com>
Signed-off-by: Kristen Carlson Accardi <kristen.c.accardi@intel.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/pci/hotplug/rpaphp.h      |    4 +---
 drivers/pci/hotplug/rpaphp_core.c |    2 +-
 drivers/pci/hotplug/rpaphp_pci.c  |   10 +++++++++-
 3 files changed, 11 insertions(+), 5 deletions(-)

--- a/drivers/pci/hotplug/rpaphp.h
+++ b/drivers/pci/hotplug/rpaphp.h
@@ -87,13 +87,11 @@ extern struct list_head rpaphp_slot_head
 /* function prototypes */
 
 /* rpaphp_pci.c */
-extern int rpaphp_enable_pci_slot(struct slot *slot);
-extern int rpaphp_register_pci_slot(struct slot *slot);
+extern int rpaphp_enable_slot(struct slot *slot);
 extern int rpaphp_get_sensor_state(struct slot *slot, int *state);
 
 /* rpaphp_core.c */
 extern int rpaphp_add_slot(struct device_node *dn);
-extern int rpaphp_remove_slot(struct slot *slot);
 extern int rpaphp_get_drc_props(struct device_node *dn, int *drc_index,
 		char **drc_name, char **drc_type, int *drc_power_domain);
 
--- a/drivers/pci/hotplug/rpaphp_core.c
+++ b/drivers/pci/hotplug/rpaphp_core.c
@@ -318,7 +318,7 @@ int rpaphp_add_slot(struct device_node *
 		dbg("Found drc-index:0x%x drc-name:%s drc-type:%s\n",
 				indexes[i + 1], name, type);
 
-		retval = rpaphp_register_pci_slot(slot);
+		retval = rpaphp_enable_slot(slot);
 		if (!retval)
 			retval = rpaphp_register_slot(slot);
 
--- a/drivers/pci/hotplug/rpaphp_pci.c
+++ b/drivers/pci/hotplug/rpaphp_pci.c
@@ -77,7 +77,15 @@ static void set_slot_name(struct slot *s
 			bus->number);
 }
 
-int rpaphp_register_pci_slot(struct slot *slot)
+/**
+ * rpaphp_enable_slot - record slot state, config pci device
+ *
+ * Initialize values in the slot, and the hotplug_slot info
+ * structures to indicate if there is a pci card plugged into
+ * the slot. If the slot is not empty, run the pcibios routine
+ * to get pcibios stuff correctly set up.
+ */
+int rpaphp_enable_slot(struct slot *slot)
 {
 	int rc, level, state;
 	struct pci_bus *bus;
