From owner-linux-pci@atrey.karlin.mff.cuni.cz Wed May  3 15:32:07 2006
Date: Wed, 3 May 2006 15:27:47 -0700
From: Rajesh Shah <rajesh.shah@intel.com>
To: gregkh@suse.de, <ak@suse.de>
Cc: <akpm@osdl.org>
Subject: PCI: i386/x86_84: disable PCI resource decode on device disable
Message-ID: <20060503152747.A29327@unix-os.sc.intel.com>
Content-Disposition: inline


When a PCI device is disabled via pci_disable_device(), it's still
left decoding its BAR resource ranges even though its driver
will have likely released those regions (and may even have
unloaded). pci_enable_device() already explicitly enables 
BAR resource decode for the device being enabled. This patch
disables resource decode for the PCI device being disabled,
making it symmetric with the enable call.

I saw this while doing something else, not because of a
problem report. Still, seems to be the correct thing to do.

Signed-off-by: Rajesh Shah <rajesh.shah@intel.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 arch/i386/pci/common.c |    1 +
 arch/i386/pci/i386.c   |    9 +++++++++
 arch/i386/pci/pci.h    |    1 +
 3 files changed, 11 insertions(+)

--- gregkh-2.6.orig/arch/i386/pci/common.c
+++ gregkh-2.6/arch/i386/pci/common.c
@@ -288,6 +288,7 @@ int pcibios_enable_device(struct pci_dev
 
 void pcibios_disable_device (struct pci_dev *dev)
 {
+	pcibios_disable_resources(dev);
 	if (pcibios_disable_irq)
 		pcibios_disable_irq(dev);
 }
--- gregkh-2.6.orig/arch/i386/pci/i386.c
+++ gregkh-2.6/arch/i386/pci/i386.c
@@ -242,6 +242,15 @@ int pcibios_enable_resources(struct pci_
 	return 0;
 }
 
+void pcibios_disable_resources(struct pci_dev *dev)
+{
+	u16 cmd;
+
+	pci_read_config_word(dev, PCI_COMMAND, &cmd);
+	cmd &= ~(PCI_COMMAND_IO | PCI_COMMAND_MEMORY);
+	pci_write_config_word(dev, PCI_COMMAND, cmd);
+}
+
 /*
  *  If we set up a device for bus mastering, we need to check the latency
  *  timer as certain crappy BIOSes forget to set it properly.
--- gregkh-2.6.orig/arch/i386/pci/pci.h
+++ gregkh-2.6/arch/i386/pci/pci.h
@@ -35,6 +35,7 @@ extern unsigned int pcibios_max_latency;
 
 void pcibios_resource_survey(void);
 int pcibios_enable_resources(struct pci_dev *, int);
+void pcibios_disable_resources(struct pci_dev *);
 
 /* pci-pc.c */
 
