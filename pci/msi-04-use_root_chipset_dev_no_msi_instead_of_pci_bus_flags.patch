From owner-linux-pci@atrey.karlin.mff.cuni.cz Thu Jul 13 11:01:00 2006
Message-Id: <20060713165608.855601000@myri.com>
Date: Thu, 13 Jul 2006 12:56:12 -0400
From: Brice Goglin <brice@myri.com>
To: linux-pci@atrey.karlin.mff.cuni.cz
Cc: Brice Goglin <brice@myri.com>
Subject: MSI: Check root chipset no_msi flag instead of all parent busses flags
Content-Disposition: inline; filename=msi-04-use_root_chipset_dev_no_msi_instead_of_pci_bus_flags.patch

MSI only requires support in the root chipset, which may not even have
a subordinate bus.
pci_msi_supported() now checks the no_msi flag in the root_chipset pci_dev
struct instead of the PCI_BUS_FLAGS_NO_MSI flag of all its parent busses.
The MSI quirk now sets the no_msi flag accordingly.

pci_device_exp_type() is used to checked whether a root chipset was actually
found.

Signed-off-by: Brice Goglin <brice@myri.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/pci/msi.c    |   30 ++++++++++++++++++++++++------
 drivers/pci/quirks.c |   10 ++++------
 2 files changed, 28 insertions(+), 12 deletions(-)

--- gregkh-2.6.orig/drivers/pci/msi.c
+++ gregkh-2.6/drivers/pci/msi.c
@@ -905,18 +905,36 @@ static int msix_capability_init(struct p
  * @dev: pointer to the pci_dev data structure of MSI device function
  *
  * MSI must be globally enabled and supported by the device and
- * its parent busses.
+ * its root chipset.
  **/
 static int pci_msi_supported(struct pci_dev *dev)
 {
-	struct pci_bus *bus;
+	struct pci_dev *pdev;
+	u8 exp_type;
 
 	if (!pci_msi_enable || !dev || dev->no_msi)
-		return -ENODEV;
+		return -EINVAL;
 
-	for (bus = dev->bus; bus; bus = bus->parent)
-		if (bus->bus_flags & PCI_BUS_FLAGS_NO_MSI)
-			return -ENODEV;
+	/* find root complex for our device */
+	pdev = dev;
+	while (pdev->bus && pdev->bus->self)
+		pdev = pdev->bus->self;
+
+	/* check whether we found a root chipset */
+	if (!pci_device_exp_type(pdev, &exp_type)
+	    && exp_type == PCI_EXP_TYPE_ROOT_PORT) {
+		/* it's a root chipset, check whether it supports MSI */
+		if (pdev->no_msi) {
+			dev_err(&dev->dev, "cannot enable MSI"
+				" since disabled on root chipset %s\n",
+				pci_name(pdev));
+			return -EINVAL;
+		}
+	}
+
+	/* check whether it supports MSI */
+	if (pdev->no_msi)
+		return -EINVAL;
 
 	return 0;
 }
--- gregkh-2.6.orig/drivers/pci/quirks.c
+++ gregkh-2.6/drivers/pci/quirks.c
@@ -1623,12 +1623,10 @@ DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_NV
 /* Disable MSI on chipsets that are known to not support it */
 static void __devinit quirk_disable_msi(struct pci_dev *dev)
 {
-	if (dev->subordinate) {
-		printk(KERN_WARNING "PCI: MSI quirk detected. "
-		       "PCI_BUS_FLAGS_NO_MSI set for %s subordinate bus.\n",
-		       pci_name(dev));
-		dev->subordinate->bus_flags |= PCI_BUS_FLAGS_NO_MSI;
-	}
+	printk(KERN_WARNING "PCI: MSI quirk detected. "
+	       "MSI disabled on chipset %s.\n",
+	       pci_name(dev));
+	dev->no_msi = 1;
 }
 DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_8131_BRIDGE, quirk_disable_msi);
 DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_SERVERWORKS, PCI_DEVICE_ID_SERVERWORKS_GCNB_LE,
