From linas@austin.ibm.com Thu Sep 29 06:34:51 2005
Date: Wed, 28 Sep 2005 19:33:38 -0500
To: greg@kroah.com, linux-pci@atrey.karlin.mff.cuni.cz
Cc: johnrose@us.ibm.com, paulus@samba.org
Subject: [PATCH] ppc64 PCI Hotplug: cleanup unsymmetric API routines
Message-ID: <20050929003338.GK29826@austin.ibm.com>
From: linas <linas@austin.ibm.com>


This is a minor patch to the ppc64 PCI hotplug code; it makes the call to 
rpaphp_unconfig_pci_adapter() symmetric with respect to the call to 
rpaphp_config_pci_adapter().  I discussed this with John Rose, who
had provided the last round of changes for these functions; he 
appearently had this patch but somehow failed to mail it out.

Tested. (added/removed device).

Signed-off-by: Linas Vepstas <linas@austin.ibm.com>


 drivers/pci/hotplug/rpaphp.h      |    3 ++-
 drivers/pci/hotplug/rpaphp_core.c |    5 ++++-
 drivers/pci/hotplug/rpaphp_pci.c  |   11 +++--------
 3 files changed, 9 insertions(+), 10 deletions(-)

--- gregkh-2.6.orig/drivers/pci/hotplug/rpaphp_pci.c	2005-09-30 16:21:51.000000000 -0700
+++ gregkh-2.6/drivers/pci/hotplug/rpaphp_pci.c	2005-10-03 14:36:47.000000000 -0700
@@ -319,20 +319,15 @@
 	return;
 }
 
-int rpaphp_unconfig_pci_adapter(struct slot *slot)
+int rpaphp_unconfig_pci_adapter(struct pci_bus *bus)
 {
 	struct pci_dev *dev, *tmp;
-	int retval = 0;
 
-	list_for_each_entry_safe(dev, tmp, slot->pci_devs, bus_list) {
+	list_for_each_entry_safe(dev, tmp, &bus->devices, bus_list) {
 		rpaphp_eeh_remove_bus_device(dev);
 		pci_remove_bus_device(dev);
 	}
-
-	slot->state = NOT_CONFIGURED;
-	info("%s: devices in slot[%s] unconfigured.\n", __FUNCTION__,
-	     slot->name);
-	return retval;
+	return 0;
 }
 
 static int setup_pci_hotplug_slot_info(struct slot *slot)
--- gregkh-2.6.orig/drivers/pci/hotplug/rpaphp_core.c	2005-09-30 16:21:51.000000000 -0700
+++ gregkh-2.6/drivers/pci/hotplug/rpaphp_core.c	2005-10-03 14:36:47.000000000 -0700
@@ -426,8 +426,11 @@
 
 	dbg("DISABLING SLOT %s\n", slot->name);
 	down(&rpaphp_sem);
-	retval = rpaphp_unconfig_pci_adapter(slot);
+	retval = rpaphp_unconfig_pci_adapter(slot->bus);
 	up(&rpaphp_sem);
+	slot->state = NOT_CONFIGURED;
+	info("%s: devices in slot[%s] unconfigured.\n", __FUNCTION__,
+	     slot->name);
 exit:
 	dbg("%s - Exit: rc[%d]\n", __FUNCTION__, retval);
 	return retval;
--- gregkh-2.6.orig/drivers/pci/hotplug/rpaphp.h	2005-09-30 16:21:51.000000000 -0700
+++ gregkh-2.6/drivers/pci/hotplug/rpaphp.h	2005-10-03 14:36:47.000000000 -0700
@@ -92,9 +92,10 @@
 extern int rpaphp_claim_resource(struct pci_dev *dev, int resource);
 extern int rpaphp_enable_pci_slot(struct slot *slot);
 extern int register_pci_slot(struct slot *slot);
-extern int rpaphp_unconfig_pci_adapter(struct slot *slot);
 extern int rpaphp_get_pci_adapter_status(struct slot *slot, int is_init, u8 * value);
+
 extern int rpaphp_config_pci_adapter(struct pci_bus *bus);
+extern int rpaphp_unconfig_pci_adapter(struct pci_bus *bus);
 
 /* rpaphp_core.c */
 extern int rpaphp_add_slot(struct device_node *dn);
