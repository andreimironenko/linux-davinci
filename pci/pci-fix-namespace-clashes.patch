From rshah1@unix-os.sc.intel.com Mon Nov  7 13:41:56 2005
Date: Mon, 7 Nov 2005 13:37:36 -0800
From: Rajesh Shah <rajesh.shah@intel.com>
To: Adrian Bunk <bunk@stusta.de>
Cc: Rajesh Shah <rajesh.shah@intel.com>, Andrew Morton <akpm@osdl.org>,
        greg@kroah.com, kristen.c.accardi@intel.com,
        linux-kernel@vger.kernel.org, linux-pci@atrey.karlin.mff.cuni.cz
Subject: PCI: fix namespace clashes
Message-ID: <20051107133736.A6037@unix-os.sc.intel.com>
Content-Disposition: inline

Signed-off-by: Rajesh Shah <rajesh.shah@intel.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/pci/hotplug/pciehp.h           |    4 ++--
 drivers/pci/hotplug/pciehp_hpc.c       |    2 +-
 drivers/pci/hotplug/pciehprm_acpi.c    |    4 ++--
 drivers/pci/hotplug/pciehprm_nonacpi.c |    4 ++--
 4 files changed, 7 insertions(+), 7 deletions(-)

--- gregkh-2.6.orig/drivers/pci/hotplug/pciehp.h
+++ gregkh-2.6/drivers/pci/hotplug/pciehp.h
@@ -191,8 +191,8 @@ extern u8	pciehp_handle_power_fault	(u8 
 /* pci functions */
 extern int	pciehp_configure_device		(struct slot *p_slot);
 extern int	pciehp_unconfigure_device	(struct slot *p_slot);
-extern int	get_hp_hw_control_from_firmware(struct pci_dev *dev);
-extern void	get_hp_params_from_firmware(struct pci_dev *dev,
+extern int	pciehp_get_hp_hw_control_from_firmware(struct pci_dev *dev);
+extern void	pciehp_get_hp_params_from_firmware(struct pci_dev *dev,
 	       	struct hotplug_params *hpp);
 
 
--- gregkh-2.6.orig/drivers/pci/hotplug/pciehp_hpc.c
+++ gregkh-2.6/drivers/pci/hotplug/pciehp_hpc.c
@@ -1418,7 +1418,7 @@ int pcie_init(struct controller * ctrl, 
 		dbg("Bypassing BIOS check for pciehp use on %s\n",
 				pci_name(ctrl->pci_dev));
 	} else {
-		rc = get_hp_hw_control_from_firmware(ctrl->pci_dev);
+		rc = pciehp_get_hp_hw_control_from_firmware(ctrl->pci_dev);
 		if (rc)
 			goto abort_free_ctlr;
 	}
--- gregkh-2.6.orig/drivers/pci/hotplug/pciehprm_acpi.c
+++ gregkh-2.6/drivers/pci/hotplug/pciehprm_acpi.c
@@ -169,7 +169,7 @@ static int is_root_bridge(acpi_handle ha
 	return 0;
 }
 
-int get_hp_hw_control_from_firmware(struct pci_dev *dev)
+int pciehp_get_hp_hw_control_from_firmware(struct pci_dev *dev)
 {
 	acpi_status status;
 	acpi_handle chandle, handle = DEVICE_ACPI_HANDLE(&(dev->dev));
@@ -228,7 +228,7 @@ int get_hp_hw_control_from_firmware(stru
 	return -1;
 }
 
-void get_hp_params_from_firmware(struct pci_dev *dev,
+void pciehp_get_hp_params_from_firmware(struct pci_dev *dev,
 		struct hotplug_params *hpp)
 {
 	acpi_status status = AE_NOT_FOUND;
--- gregkh-2.6.orig/drivers/pci/hotplug/pciehprm_nonacpi.c
+++ gregkh-2.6/drivers/pci/hotplug/pciehprm_nonacpi.c
@@ -35,13 +35,13 @@
 #include <linux/slab.h>
 #include "pciehp.h"
 
-void get_hp_params_from_firmware(struct pci_dev *dev,
+void pciehp_get_hp_params_from_firmware(struct pci_dev *dev,
 		struct hotplug_params *hpp)
 {
 	return;
 }
 
-int get_hp_hw_control_from_firmware(struct pci_dev *dev)
+int pciehp_get_hp_hw_control_from_firmware(struct pci_dev *dev)
 {
 	return 0;
 }
