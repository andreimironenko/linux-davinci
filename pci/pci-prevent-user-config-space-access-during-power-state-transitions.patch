From owner-linux-pci@atrey.karlin.mff.cuni.cz Tue Oct 10 06:38:27 2006
From: Matthew Wilcox <matthew@wil.cx>
To: Greg Kroah-Hartman <gregkh@suse.de>
Cc: linux-pci@atrey.karlin.mff.cuni.cz, linux-kernel@vger.kernel.org, Matthew Wilcox <matthew@wil.cx>
Subject: PCI: Prevent user config space access during power state transitions
Date: Tue, 10 Oct 2006 07:38:17 -0600
Message-Id: <1160487497203-git-send-email-matthew@wil.cx>

Section 5.3 of PCI Bus Power Management 1.2 states:

  There is a minimum recovery time requirement of 200 Âµs between when
  a function is programmed from D2 to D0 and when the function can be
  next accessed as a target (including PCI configuration accesses). If
  an access is attempted in violation of the specified minimum recovery
  time, undefined system behavior may result.

We have to prevent the user running lspci during this time, and
fortunately we already have the pci_block_user_cfg_access() API to
do this.

Signed-off-by: Matthew Wilcox <matthew@wil.cx>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/pci/pci.c |    8 ++++++++
 1 file changed, 8 insertions(+)

--- gregkh-2.6.orig/drivers/pci/pci.c
+++ gregkh-2.6/drivers/pci/pci.c
@@ -366,6 +366,11 @@ pci_set_power_state(struct pci_dev *dev,
 		break;
 	}
 
+	/* We have to prevent accesses to config space while transitioning
+	 * between power states
+	 */
+	pci_block_user_cfg_access(dev);
+
 	/* enter specified state */
 	pci_write_config_word(dev, pm + PCI_PM_CTRL, pmcsr);
 
@@ -383,6 +388,9 @@ pci_set_power_state(struct pci_dev *dev,
 	if (platform_pci_set_power_state)
 		platform_pci_set_power_state(dev, state);
 
+	/* Should be safe to allow userspace access to the device again now */
+	pci_unblock_user_cfg_access(dev);
+
 	dev->current_state = state;
 
 	/* According to section 5.4.1 of the "PCI BUS POWER MANAGEMENT
