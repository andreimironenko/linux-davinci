From foo@baz Tue Apr  9 12:12:43 2002
Date: Wed, 14 Jun 2006 12:14:34 -0700
To: Greg KH <greg@kroah.com>
From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: USB: make endpoints real struct devices

This will allow for us to give endpoints a major/minor to create a
"usbfs2-like" way to access endpoints directly from userspace in an
easier manner than the current usbfs provides us.

Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 drivers/usb/core/endpoint.c |   73 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 73 insertions(+)

--- gregkh-2.6.orig/drivers/usb/core/endpoint.c
+++ gregkh-2.6/drivers/usb/core/endpoint.c
@@ -173,6 +173,76 @@ static struct kobj_type ep_object_ktype 
 	.default_attrs =	ep_attrs,
 };
 
+static struct endpoint_class {
+	struct kref kref;
+	struct class *class;
+} *ep_class;
+
+static int init_endpoint_class(void)
+{
+	int result = 0;
+
+	if (ep_class != NULL) {
+		kref_get(&ep_class->kref);
+		goto exit;
+	}
+
+	ep_class = kmalloc(sizeof(*ep_class), GFP_KERNEL);
+	if (!ep_class) {
+		result = -ENOMEM;
+		goto exit;
+	}
+
+	kref_init(&ep_class->kref);
+	ep_class->class = class_create(THIS_MODULE, "usb_endpoint");
+	if (IS_ERR(ep_class->class)) {
+		result = IS_ERR(ep_class->class);
+		kfree(ep_class);
+		ep_class = NULL;
+		goto exit;
+	}
+
+exit:
+	return result;
+}
+
+static void release_endpoint_class(struct kref *kref)
+{
+	/* Ok, we cheat as we know we only have on ep_class */
+	kfree(ep_class);
+	ep_class = NULL;
+}
+
+static void destroy_endpoint_class(void)
+{
+	if (ep_class)
+		kref_put(&ep_class->kref, release_endpoint_class);
+}
+
+static int create_endpoint_class_device(struct device *parent,
+					struct usb_host_endpoint *endpoint,
+					struct usb_device *udev)
+{
+	int retval;
+	struct device *dev;
+	int minor;
+
+	retval = init_endpoint_class();
+	if (retval)
+		goto exit;
+
+	minor = (((udev->bus->busnum - 1) * 128) * 16) + (udev->devnum - 1);
+
+	dev = device_create(ep_class->class, parent, MKDEV(442, minor),
+			    "usbdev%d.%d_ep%02x", udev->bus->busnum,
+			    udev->devnum, endpoint->desc.bEndpointAddress);
+
+	dev->platform_data = endpoint;
+
+exit:
+	return retval;
+}
+
 void usb_create_ep_files(struct device *parent,
 			 struct usb_host_endpoint *endpoint,
 			 struct usb_device *udev)
@@ -180,6 +250,8 @@ void usb_create_ep_files(struct device *
 	struct ep_object *ep_obj;
 	struct kobject *kobj;
 
+	create_endpoint_class_device(parent, endpoint, udev);
+
 	ep_obj = kzalloc(sizeof(struct ep_object), GFP_KERNEL);
 	if (!ep_obj)
 		return;
@@ -208,6 +280,7 @@ void usb_remove_ep_files(struct usb_host
 		kobject_put(endpoint->kobj);
 		endpoint->kobj = NULL;
 	}
+	destroy_endpoint_class();
 }
 
 
