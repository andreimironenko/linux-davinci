---
 drivers/base/power/shutdown.c |    4 ++--
 drivers/ide/ide-proc.c        |    8 ++++----
 drivers/input/serio/serio.c   |   13 +++++++------
 drivers/net/phy/fixed.c       |    6 +++---
 drivers/net/phy/phy_device.c  |    8 ++++----
 drivers/pnp/card.c            |   10 +++++-----
 drivers/scsi/hosts.c          |    4 ++--
 drivers/usb/core/devices.c    |    4 ++--
 drivers/usb/core/devio.c      |   20 ++++++++++----------
 include/linux/kobject.h       |    2 +-
 lib/kobject.c                 |    2 +-
 11 files changed, 41 insertions(+), 40 deletions(-)

--- a/drivers/base/power/shutdown.c
+++ b/drivers/base/power/shutdown.c
@@ -36,7 +36,7 @@ void device_shutdown(void)
 {
 	struct device * dev, *devn;
 
-	down_write(&devices_subsys.rwsem);
+//	down_write(&devices_subsys.rwsem);
 	list_for_each_entry_safe_reverse(dev, devn, &devices_subsys.kset.list,
 				kobj.entry) {
 		if (dev->bus && dev->bus->shutdown) {
@@ -47,7 +47,7 @@ void device_shutdown(void)
 			dev->driver->shutdown(dev);
 		}
 	}
-	up_write(&devices_subsys.rwsem);
+//	up_write(&devices_subsys.rwsem);
 
 	sysdev_shutdown();
 }
--- a/drivers/ide/ide-proc.c
+++ b/drivers/ide/ide-proc.c
@@ -310,14 +310,14 @@ static int proc_ide_read_driver
 	ide_driver_t	*ide_drv;
 	int		len;
 
-	down_read(&dev->bus->subsys.rwsem);
+//	down_read(&dev->bus->subsys.rwsem);
 	if (dev->driver) {
 		ide_drv = container_of(dev->driver, ide_driver_t, gen_driver);
 		len = sprintf(page, "%s version %s\n",
 				dev->driver->name, ide_drv->version);
 	} else
 		len = sprintf(page, "ide-default version 0.9.newide\n");
-	up_read(&dev->bus->subsys.rwsem);
+//	up_read(&dev->bus->subsys.rwsem);
 	PROC_IDE_READ_RETURN(page,start,off,count,eof,len);
 }
 
@@ -327,7 +327,7 @@ static int ide_replace_subdriver(ide_dri
 	int ret = 1;
 	int err;
 
-	down_write(&dev->bus->subsys.rwsem);
+//	down_write(&dev->bus->subsys.rwsem);
 	device_release_driver(dev);
 	/* FIXME: device can still be in use by previous driver */
 	strlcpy(drive->driver_req, driver, sizeof(drive->driver_req));
@@ -345,7 +345,7 @@ static int ide_replace_subdriver(ide_dri
 	}
 	if (dev->driver && !strcmp(dev->driver->name, driver))
 		ret = 0;
-	up_write(&dev->bus->subsys.rwsem);
+//	up_write(&dev->bus->subsys.rwsem);
 
 	return ret;
 }
--- a/drivers/input/serio/serio.c
+++ b/drivers/input/serio/serio.c
@@ -119,7 +119,7 @@ static void serio_bind_driver(struct ser
 {
 	int error;
 
-	down_write(&serio_bus.subsys.rwsem);
+//	down_write(&serio_bus.subsys.rwsem);
 
 	if (serio_match_port(drv->id_table, serio)) {
 		serio->dev.driver = &drv->driver;
@@ -140,27 +140,28 @@ static void serio_bind_driver(struct ser
 		}
 	}
  out:
-	up_write(&serio_bus.subsys.rwsem);
+ 	;
+//	up_write(&serio_bus.subsys.rwsem);
 }
 
 static void serio_release_driver(struct serio *serio)
 {
-	down_write(&serio_bus.subsys.rwsem);
+//	down_write(&serio_bus.subsys.rwsem);
 	device_release_driver(&serio->dev);
-	up_write(&serio_bus.subsys.rwsem);
+//	up_write(&serio_bus.subsys.rwsem);
 }
 
 static void serio_find_driver(struct serio *serio)
 {
 	int error;
 
-	down_write(&serio_bus.subsys.rwsem);
+//	down_write(&serio_bus.subsys.rwsem);
 	error = device_attach(&serio->dev);
 	if (error < 0)
 		printk(KERN_WARNING
 			"serio: device_attach() failed for %s (%s), error: %d\n",
 			serio->phys, serio->name, error);
-	up_write(&serio_bus.subsys.rwsem);
+//	up_write(&serio_bus.subsys.rwsem);
 }
 
 
--- a/drivers/net/phy/fixed.c
+++ b/drivers/net/phy/fixed.c
@@ -276,20 +276,20 @@ static int fixed_mdio_register_device(in
 	   artificially, we are binding the driver here by hand;
 	   it will be the same for all the fixed phys anyway.
 	 */
-	down_write(&phydev->dev.bus->subsys.rwsem);
+//	down_write(&phydev->dev.bus->subsys.rwsem);
 
 	phydev->dev.driver = &fixed_mdio_driver.driver;
 
 	err = phydev->dev.driver->probe(&phydev->dev);
 	if(err < 0) {
 		printk(KERN_ERR "Phy %s: problems with fixed driver\n",phydev->dev.bus_id);
-		up_write(&phydev->dev.bus->subsys.rwsem);
+//		up_write(&phydev->dev.bus->subsys.rwsem);
 		goto probe_fail;
 	}
 
 	err = device_bind_driver(&phydev->dev);
 
-	up_write(&phydev->dev.bus->subsys.rwsem);
+//	up_write(&phydev->dev.bus->subsys.rwsem);
 
 	if (err)
 		goto probe_fail;
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -208,7 +208,7 @@ struct phy_device *phy_attach(struct net
 	 * exist, and we should use the genphy driver. */
 	if (NULL == d->driver) {
 		int err;
-		down_write(&d->bus->subsys.rwsem);
+//		down_write(&d->bus->subsys.rwsem);
 		d->driver = &genphy_driver.driver;
 
 		err = d->driver->probe(d);
@@ -216,7 +216,7 @@ struct phy_device *phy_attach(struct net
 		if (err >= 0)
 			err = device_bind_driver(d);
 
-		up_write(&d->bus->subsys.rwsem);
+//		up_write(&d->bus->subsys.rwsem);
 
 		if (err)
 			return ERR_PTR(err);
@@ -259,9 +259,9 @@ void phy_detach(struct phy_device *phyde
 	 * from the generic driver so that there's a chance a
 	 * real driver could be loaded */
 	if (phydev->dev.driver == &genphy_driver.driver) {
-		down_write(&phydev->dev.bus->subsys.rwsem);
+//		down_write(&phydev->dev.bus->subsys.rwsem);
 		device_release_driver(&phydev->dev);
-		up_write(&phydev->dev.bus->subsys.rwsem);
+//		up_write(&phydev->dev.bus->subsys.rwsem);
 	}
 }
 EXPORT_SYMBOL(phy_detach);
--- a/drivers/pnp/card.c
+++ b/drivers/pnp/card.c
@@ -311,7 +311,7 @@ done:
 	return NULL;
 
 found:
-	down_write(&dev->dev.bus->subsys.rwsem);
+//	down_write(&dev->dev.bus->subsys.rwsem);
 	dev->card_link = clink;
 	dev->dev.driver = &drv->link.driver;
 	if (pnp_bus_type.probe(&dev->dev))
@@ -319,14 +319,14 @@ found:
 	if (device_bind_driver(&dev->dev))
 		goto err_out;
 
-	up_write(&dev->dev.bus->subsys.rwsem);
+//	up_write(&dev->dev.bus->subsys.rwsem);
 
 	return dev;
 
 err_out:
 	dev->dev.driver = NULL;
 	dev->card_link = NULL;
-	up_write(&dev->dev.bus->subsys.rwsem);
+//	up_write(&dev->dev.bus->subsys.rwsem);
 	return NULL;
 }
 
@@ -340,11 +340,11 @@ void pnp_release_card_device(struct pnp_
 	struct pnp_card_driver * drv = dev->card_link->driver;
 	if (!drv)
 		return;
-	down_write(&dev->dev.bus->subsys.rwsem);
+//	down_write(&dev->dev.bus->subsys.rwsem);
 	drv->link.remove = &card_remove;
 	device_release_driver(&dev->dev);
 	drv->link.remove = &card_remove_first;
-	up_write(&dev->dev.bus->subsys.rwsem);
+//	up_write(&dev->dev.bus->subsys.rwsem);
 }
 
 /*
--- a/drivers/scsi/hosts.c
+++ b/drivers/scsi/hosts.c
@@ -435,7 +435,7 @@ struct Scsi_Host *scsi_host_lookup(unsig
 	struct class_device *cdev;
 	struct Scsi_Host *shost = ERR_PTR(-ENXIO), *p;
 
-	down_read(&class->subsys.rwsem);
+//	down_read(&class->subsys.rwsem);
 	list_for_each_entry(cdev, &class->children, node) {
 		p = class_to_shost(cdev);
 		if (p->host_no == hostnum) {
@@ -443,7 +443,7 @@ struct Scsi_Host *scsi_host_lookup(unsig
 			break;
 		}
 	}
-	up_read(&class->subsys.rwsem);
+//	up_read(&class->subsys.rwsem);
 
 	return shost;
 }
--- a/drivers/usb/core/devices.c
+++ b/drivers/usb/core/devices.c
@@ -246,7 +246,7 @@ static char *usb_dump_interface_descript
 
 	if (start > end)
 		return start;
-	down_read(&usb_bus_type.subsys.rwsem);
+//	down_read(&usb_bus_type.subsys.rwsem);
 	if (iface) {
 		driver_name = (iface->dev.driver
 				? iface->dev.driver->name
@@ -263,7 +263,7 @@ static char *usb_dump_interface_descript
 			 desc->bInterfaceSubClass,
 			 desc->bInterfaceProtocol,
 			 driver_name);
-	up_read(&usb_bus_type.subsys.rwsem);
+//	up_read(&usb_bus_type.subsys.rwsem);
 	return start;
 }
 
--- a/drivers/usb/core/devio.c
+++ b/drivers/usb/core/devio.c
@@ -421,13 +421,13 @@ static int claimintf(struct dev_state *p
 		return 0;
 
 	/* lock against other changes to driver bindings */
-	down_write(&usb_bus_type.subsys.rwsem);
+//	down_write(&usb_bus_type.subsys.rwsem);
 	intf = usb_ifnum_to_if(dev, ifnum);
 	if (!intf)
 		err = -ENOENT;
 	else
 		err = usb_driver_claim_interface(&usbfs_driver, intf, ps);
-	up_write(&usb_bus_type.subsys.rwsem);
+//	up_write(&usb_bus_type.subsys.rwsem);
 	if (err == 0)
 		set_bit(ifnum, &ps->ifclaimed);
 	return err;
@@ -444,7 +444,7 @@ static int releaseintf(struct dev_state 
 		return err;
 	dev = ps->dev;
 	/* lock against other changes to driver bindings */
-	down_write(&usb_bus_type.subsys.rwsem);
+//	down_write(&usb_bus_type.subsys.rwsem);
 	intf = usb_ifnum_to_if(dev, ifnum);
 	if (!intf)
 		err = -ENOENT;
@@ -452,7 +452,7 @@ static int releaseintf(struct dev_state 
 		usb_driver_release_interface(&usbfs_driver, intf);
 		err = 0;
 	}
-	up_write(&usb_bus_type.subsys.rwsem);
+//	up_write(&usb_bus_type.subsys.rwsem);
 	return err;
 }
 
@@ -818,7 +818,7 @@ static int proc_getdriver(struct dev_sta
 
 	if (copy_from_user(&gd, arg, sizeof(gd)))
 		return -EFAULT;
-	down_read(&usb_bus_type.subsys.rwsem);
+//	down_read(&usb_bus_type.subsys.rwsem);
 	intf = usb_ifnum_to_if(ps->dev, gd.interface);
 	if (!intf || !intf->dev.driver)
 		ret = -ENODATA;
@@ -827,7 +827,7 @@ static int proc_getdriver(struct dev_sta
 				sizeof(gd.driver));
 		ret = (copy_to_user(arg, &gd, sizeof(gd)) ? -EFAULT : 0);
 	}
-	up_read(&usb_bus_type.subsys.rwsem);
+//	up_read(&usb_bus_type.subsys.rwsem);
 	return ret;
 }
 
@@ -1357,14 +1357,14 @@ static int proc_ioctl(struct dev_state *
 	/* disconnect kernel driver from interface */
 	case USBDEVFS_DISCONNECT:
 
-		down_write(&usb_bus_type.subsys.rwsem);
+//		down_write(&usb_bus_type.subsys.rwsem);
 		if (intf->dev.driver) {
 			driver = to_usb_driver(intf->dev.driver);
 			dev_dbg (&intf->dev, "disconnect by usbfs\n");
 			usb_driver_release_interface(driver, intf);
 		} else
 			retval = -ENODATA;
-		up_write(&usb_bus_type.subsys.rwsem);
+//		up_write(&usb_bus_type.subsys.rwsem);
 		break;
 
 	/* let kernel drivers try to (re)bind to the interface */
@@ -1376,7 +1376,7 @@ static int proc_ioctl(struct dev_state *
 
 	/* talk directly to the interface's driver */
 	default:
-		down_read(&usb_bus_type.subsys.rwsem);
+//		down_read(&usb_bus_type.subsys.rwsem);
 		if (intf->dev.driver)
 			driver = to_usb_driver(intf->dev.driver);
 		if (driver == NULL || driver->ioctl == NULL) {
@@ -1386,7 +1386,7 @@ static int proc_ioctl(struct dev_state *
 			if (retval == -ENOIOCTLCMD)
 				retval = -ENOTTY;
 		}
-		up_read(&usb_bus_type.subsys.rwsem);
+//		up_read(&usb_bus_type.subsys.rwsem);
 	}
 
 	/* cleanup and return */
--- a/include/linux/kobject.h
+++ b/include/linux/kobject.h
@@ -177,7 +177,7 @@ extern struct kobject * kset_find_obj(st
 
 struct subsystem {
 	struct kset		kset;
-	struct rw_semaphore	rwsem;
+//	struct rw_semaphore	rwsem;
 };
 
 #define decl_subsys(_name,_type,_uevent_ops) \
--- a/lib/kobject.c
+++ b/lib/kobject.c
@@ -671,7 +671,7 @@ struct kobject * kset_find_obj(struct ks
 
 void subsystem_init(struct subsystem * s)
 {
-	init_rwsem(&s->rwsem);
+//	init_rwsem(&s->rwsem);
 	kset_init(&s->kset);
 }
 
