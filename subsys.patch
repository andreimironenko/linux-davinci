---
 drivers/ide/ide-proc.c       |    8 ++++----
 drivers/net/phy/fixed.c      |    6 +++---
 drivers/net/phy/phy_device.c |    8 ++++----
 include/linux/kobject.h      |    2 +-
 lib/kobject.c                |    2 +-
 5 files changed, 13 insertions(+), 13 deletions(-)

--- a/drivers/ide/ide-proc.c
+++ b/drivers/ide/ide-proc.c
@@ -310,14 +310,14 @@ static int proc_ide_read_driver
 	ide_driver_t	*ide_drv;
 	int		len;
 
-	down_read(&dev->bus->subsys.rwsem);
+//	down_read(&dev->bus->subsys.rwsem);
 	if (dev->driver) {
 		ide_drv = container_of(dev->driver, ide_driver_t, gen_driver);
 		len = sprintf(page, "%s version %s\n",
 				dev->driver->name, ide_drv->version);
 	} else
 		len = sprintf(page, "ide-default version 0.9.newide\n");
-	up_read(&dev->bus->subsys.rwsem);
+//	up_read(&dev->bus->subsys.rwsem);
 	PROC_IDE_READ_RETURN(page,start,off,count,eof,len);
 }
 
@@ -327,7 +327,7 @@ static int ide_replace_subdriver(ide_dri
 	int ret = 1;
 	int err;
 
-	down_write(&dev->bus->subsys.rwsem);
+//	down_write(&dev->bus->subsys.rwsem);
 	device_release_driver(dev);
 	/* FIXME: device can still be in use by previous driver */
 	strlcpy(drive->driver_req, driver, sizeof(drive->driver_req));
@@ -345,7 +345,7 @@ static int ide_replace_subdriver(ide_dri
 	}
 	if (dev->driver && !strcmp(dev->driver->name, driver))
 		ret = 0;
-	up_write(&dev->bus->subsys.rwsem);
+//	up_write(&dev->bus->subsys.rwsem);
 
 	return ret;
 }
--- a/drivers/net/phy/fixed.c
+++ b/drivers/net/phy/fixed.c
@@ -276,20 +276,20 @@ static int fixed_mdio_register_device(in
 	   artificially, we are binding the driver here by hand;
 	   it will be the same for all the fixed phys anyway.
 	 */
-	down_write(&phydev->dev.bus->subsys.rwsem);
+//	down_write(&phydev->dev.bus->subsys.rwsem);
 
 	phydev->dev.driver = &fixed_mdio_driver.driver;
 
 	err = phydev->dev.driver->probe(&phydev->dev);
 	if(err < 0) {
 		printk(KERN_ERR "Phy %s: problems with fixed driver\n",phydev->dev.bus_id);
-		up_write(&phydev->dev.bus->subsys.rwsem);
+//		up_write(&phydev->dev.bus->subsys.rwsem);
 		goto probe_fail;
 	}
 
 	err = device_bind_driver(&phydev->dev);
 
-	up_write(&phydev->dev.bus->subsys.rwsem);
+//	up_write(&phydev->dev.bus->subsys.rwsem);
 
 	if (err)
 		goto probe_fail;
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -208,7 +208,7 @@ struct phy_device *phy_attach(struct net
 	 * exist, and we should use the genphy driver. */
 	if (NULL == d->driver) {
 		int err;
-		down_write(&d->bus->subsys.rwsem);
+//		down_write(&d->bus->subsys.rwsem);
 		d->driver = &genphy_driver.driver;
 
 		err = d->driver->probe(d);
@@ -216,7 +216,7 @@ struct phy_device *phy_attach(struct net
 		if (err >= 0)
 			err = device_bind_driver(d);
 
-		up_write(&d->bus->subsys.rwsem);
+//		up_write(&d->bus->subsys.rwsem);
 
 		if (err)
 			return ERR_PTR(err);
@@ -259,9 +259,9 @@ void phy_detach(struct phy_device *phyde
 	 * from the generic driver so that there's a chance a
 	 * real driver could be loaded */
 	if (phydev->dev.driver == &genphy_driver.driver) {
-		down_write(&phydev->dev.bus->subsys.rwsem);
+//		down_write(&phydev->dev.bus->subsys.rwsem);
 		device_release_driver(&phydev->dev);
-		up_write(&phydev->dev.bus->subsys.rwsem);
+//		up_write(&phydev->dev.bus->subsys.rwsem);
 	}
 }
 EXPORT_SYMBOL(phy_detach);
--- a/include/linux/kobject.h
+++ b/include/linux/kobject.h
@@ -177,7 +177,7 @@ extern struct kobject * kset_find_obj(st
 
 struct subsystem {
 	struct kset		kset;
-	struct rw_semaphore	rwsem;
+//	struct rw_semaphore	rwsem;
 };
 
 #define decl_subsys(_name,_type,_uevent_ops) \
--- a/lib/kobject.c
+++ b/lib/kobject.c
@@ -671,7 +671,7 @@ struct kobject * kset_find_obj(struct ks
 
 void subsystem_init(struct subsystem * s)
 {
-	init_rwsem(&s->rwsem);
+//	init_rwsem(&s->rwsem);
 	kset_init(&s->kset);
 }
 
